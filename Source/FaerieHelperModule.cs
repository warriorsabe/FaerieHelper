using System;
using System.Reflection;
using Celeste.Mod.FaerieHelper.Entities;
using MonoMod.RuntimeDetour;
using MonoMod.Utils;

namespace Celeste.Mod.FaerieHelper;

public class FaerieHelperModule : EverestModule {
    public static FaerieHelperModule Instance { get; private set; }

    public override Type SettingsType => typeof(FaerieHelperModuleSettings);
    public static FaerieHelperModuleSettings Settings => (FaerieHelperModuleSettings) Instance._Settings;

    public override Type SessionType => typeof(FaerieHelperModuleSession);
    public static FaerieHelperModuleSession Session => (FaerieHelperModuleSession) Instance._Session;

    public override Type SaveDataType => typeof(FaerieHelperModuleSaveData);
    public static FaerieHelperModuleSaveData SaveData => (FaerieHelperModuleSaveData) Instance._SaveData;

    private static ILHook LoadingCoroutineHook;
    
    public FaerieHelperModule() {
        Instance = this;
#if DEBUG
        // debug builds use verbose logging
        Logger.SetLogLevel(nameof(FaerieHelperModule), LogLevel.Verbose);
#else
        // release builds use info logging to reduce spam in log files
        Logger.SetLogLevel(nameof(FaerieHelperModule), LogLevel.Info);
#endif
    }

    public override void Load() {
        IL.Celeste.Player.NormalUpdate += CoriolisController.modPlayerNormalUpdate;
        

        MethodInfo Coroutine = typeof(Player).GetMethod("DashCoroutine", BindingFlags.NonPublic|BindingFlags.Instance).GetStateMachineTarget();
        
        // So what's actually going on here? Why do we need such a roundabout way of getting here? What is that .GetStateMachineTarget() doing here?
        // What's actually going on under the hood is that coroutines are just "StateMachine"s in disguise. Crafting a new StateMachine and designing it the way you want is rather annoying for how often they're used.
        // So, Routines simplify and abstractify that process. Which is great for most use cases.... but sucky if we're trying to modify it directly.
        // The reason it has such an awful name (d__427) is because it's generated by the compiler. The routine is just a way to interface with it in a way that doesn't make you want to cry.
        // What this is doing is getting the MethodInfo *of* that StateMachine, so we can hook into it.

        // ⮦ Now we actually define the hook.
        
        LoadingCoroutineHook = new ILHook(Coroutine, CoriolisController.ModifiedCoroutineHook);
    }

    public override void Unload() {
        IL.Celeste.Player.NormalUpdate -= CoriolisController.modPlayerNormalUpdate;
        
        LoadingCoroutineHook?.Dispose(); LoadingCoroutineHook = null;
    }
}